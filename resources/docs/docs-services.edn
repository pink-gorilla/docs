{:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 ;:secrets #include "secrets.edn" ;; externalised and usually "mounted" as a docker/kubernetes secret
 :components
 {; the print services can be comment out. Just useful for testing.
  :print-modular-env {:start (println "modular environment: " #ref [:modular])}

  :config1 {:start (modular.config/load-config! (:config #ref [:modular]))}
  :config {:start (deref (clip/ref :config1))}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (clip/ref :config)))}

  :exts {:start (extension/discover)}

  ; empty map means no users are configured, so always permissioned.
  :permission {:start (modular.permission.core/start-permissions {})}

  :clj-service {:start (clj-service.core/start-clj-services
                        (clip/ref :permission)
                        (clip/ref :exts))}

  :reval {:start (reval.core/start-reval
                  (merge {:clj  (clip/ref :clj-service)
                          :reval-role nil}
                         (:reval (clip/ref :config))))}

  :exec {:start (flowy.executor/start-executor
                 {:env {}
                  :exts (clip/ref :exts)}
                 (:services (clip/ref :config)))}
  
  :flowy {:start (flowy.reflower/start-reflower (clip/ref :exec))}
     
  :webly {:start (webly.spa/start-webly
                  {:exts (clip/ref :exts)
                   :ctx {:flowy (clip/ref :flowy)}}
                  (clip/ref :config)
                  (:profile #ref [:modular]))
          :stop (webly.spa/stop-webly this)}
  

  :nrepl {;:pre-start (spit ".nrepl-port" (str 9100))
          :start (nrepl.server/start-server
                  :bind "0.0.0.0"
                  :port 9100
                  :middleware cider.nrepl.middleware/cider-middleware
                  :handler cider.nrepl/cider-nrepl-handler)
          :stop (.close this)}

;  
  }}
